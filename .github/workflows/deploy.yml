name: Deploy PHP Application

on:
  push:
    branches:
      - main # Or 'master', or any branch you want to trigger deployment from

jobs:
  deploy:
    runs-on: ubuntu-latest # The GitHub Actions runner environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.9.0 # Action to add your SSH private key to the runner's SSH agent
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Use the secret you stored in GitHub

      - name: Deploy to VPS
        run: |
          # Add your VPS IP address and username from GitHub Secrets
          SSH_HOST=${{ secrets.VPS_HOST }}
          SSH_USER=${{ secrets.VPS_USER }}

          # Define your project directory on the VPS
          # This is where your application code will reside and Docker will be built
          # Make sure this directory exists on your VPS, e.g., /var/www/your-app-name
          # You can create it manually if it doesn't exist: sudo mkdir -p /var/www/your-app-name && sudo chown deployuser:deployuser /var/www/your-app-name
          DEPLOY_DIR="/var/www/html/logitech-php" # <-- IMPORTANT: Customize this path on your VPS

          echo "Connecting to $SSH_USER@$SSH_HOST"
          # Execute commands on the VPS via SSH
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" << 'EOF'
            # Ensure the deployment directory exists on the VPS
            mkdir -p "${DEPLOY_DIR}"

            # Navigate into the deployment directory
            cd "${DEPLOY_DIR}" || exit 1 # Exit if cd fails

            # Pull the latest code changes from GitHub
            # Ensure you have git installed on your VPS and this directory is a git repo
            # For simplicity, we'll clone if not exists, else pull.
            # NOTE: If your repository is private, the deployuser needs SSH access to GitHub,
            # or you clone with a token. For now, let's assume it's public or we'll adjust.
            if [ -d ".git" ]; then
              echo "Pulling latest changes..."
              git pull origin main # Adjust 'main' to your branch name if different
            else
              echo "Cloning repository..."
              git clone git@github.com:Masoud-M/logitech-php.git . # <-- IMPORTANT: Replace with your actual GitHub repo URL (e.g., git@github.com:youruser/yourrepo.git for SSH, or https://github.com/youruser/yourrepo.git)
              git checkout main # Adjust 'main' to your branch name if different
            fi

            echo "Building and restarting Docker containers..."
            # Build the Docker image and restart containers using docker-compose
            # '-f docker-compose.yml' is often not needed if in the same directory
            docker-compose down # Stop and remove existing containers
            docker-compose build --no-cache # Build with no cache to ensure latest code is used
            docker-compose up -d --force-recreate # Start containers, recreate to pick up new image
            echo "Deployment complete."
          EOF