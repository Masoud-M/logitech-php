name: Deploy PHP Application

on:
  push:
    branches:
      - main # Adjust this to your primary branch, e.g., 'master' or 'dev'

jobs:
  deploy:
    runs-on: ubuntu-latest # The GitHub Actions runner environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to check out your repository code onto the runner

      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.9.0 # Action to load your SSH private key for secure connection
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Uses the secret you stored in GitHub

      - name: Deploy to VPS
        run: |
          SSH_HOST=${{ secrets.VPS_HOST }}
          SSH_USER=${{ secrets.VPS_USER }}
          DEPLOY_DIR="/var/www/html/logitech-php" # This is where your project's root will be

          echo "Connecting to $SSH_USER@$SSH_HOST"
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "
            mkdir -p ${DEPLOY_DIR}

            # Navigate into the deployment directory
            cd ${DEPLOY_DIR} || { echo 'Failed to change directory to ${DEPLOY_DIR}'; exit 1; }

            echo '--- DIAGNOSTIC: Current working directory on VPS BEFORE Git pull ---'
            pwd
            echo '--- DIAGNOSTIC: Files in current directory BEFORE Git pull ---'
            ls -la

            if [ -d \".git\" ]; then
              echo \"Pulling latest changes...\"
              git pull origin main # Adjust 'main' to your branch name if different
            else
              echo \"Cloning repository...\"
              git clone https://github.com/Masoud-M/logitech-php . # HTTPS URL for public repo
              git checkout main # Adjust 'main' to your branch name if different
            fi

            echo '--- DIAGNOSTIC: Current working directory on VPS AFTER Git pull ---'
            pwd
            echo '--- DIAGNOSTIC: Files in current directory AFTER Git pull ---'
            ls -la src/ # Check contents of src/ too
            ls -la docker/ # Check contents of docker/ too, just in case
            ls -la Dockerfile
            ls -la docker-compose.yml

            echo \"Building and restarting Docker containers...\"
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d --force-recreate
            echo \"Deployment complete.\"
          "